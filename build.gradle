plugins {
  id 'com.moowork.node' version '0.12'
  id 'com.moowork.gulp' version '0.12'
  id 'org.asciidoctor.convert' version '1.5.3'
  id 'com.github.jruby-gradle.base' version '1.2.1'
  id 'org.kordamp.gradle.livereload' version '0.2.1'
}

dependencies {
  gems('rubygems:asciidoctor-bespoke:1.0.0.alpha.1') {
    transitive false
  }
}

// TIP The pattern npm_<command_name> executes an NPM command.
node {
  version = '0.12.9'
  download = true // true tells plugin to manage node installation, false tells plugin to use system node
  workDir = file('gradle/nodejs')
  // NOTE set npmVersion only if you want to upgrade npm
  //npmVersion = '2.15.3'
}

jrubyPrepare {
  outputDir "rubygems/jruby/${project.jruby.execVersion}"
}

task setup {
  dependsOn npmInstall, jrubyPrepare
}

// TIP The pattern gulp_<task_name> executes a gulp task; run gulpTasks to get list of tasks
gulp {
  colors = false
}

task gulpTasks(type: GulpTask) {
  args = ['--tasks-simple']
}

gulp_build.dependsOn = []
gulp_clean.dependsOn = []

gulp_js {
  dependsOn = []
  inputs.file 'src/app/scripts/main.js'
  outputs.file "${project.buildDir}/bespoke/build/build.js"
}

gulp_css {
  dependsOn = []
  inputs.dir 'src/app/styles'
  outputs.file "${project.buildDir}/bespoke/build/build.css"
}

gulp_html_jade {
  dependsOn = []
  inputs.file 'src/content/index.jade'
  outputs.file "${project.buildDir}/bespoke/index-jade.html"
}

gulp_deploy {
  dependsOn = []
  mustRunAfter build
}

asciidoctorj {
  version = '1.5.4'
}

// NOTE this task will trigger for any file change in the sourceDir, not just index.adoc
asciidoctor {
  dependsOn = [gulp_js, gulp_css, gulp_html_jade] 
  gemPath = jrubyPrepare.outputDir
  requires 'asciidoctor-bespoke'
  backends 'bespoke'
  // NOTE enable the options below if you want to load custom templates
  //options template_dirs: [file('src/templates')], template_engine: 'slim'
  sourceDir 'src/content'
  sources {
    include 'index.adoc'
  }
  resources {
    from(sourceDir) {
      include 'images/**'
      include 'fonts/**'
    }
  }
  outputDir buildDir
}

build {
  dependsOn = [asciidoctor]
  mustRunAfter clean
}

task deploy {
  dependsOn clean, build, gulp_deploy
}

apply plugin: 'jetty'

jettyRun {
  dependsOn = []
  mustRunAfter build
  contextPath ''
  httpPort 8000
  webAppSourceDirectory file("${project.buildDir}/bespoke")
}

task serve {
  dependsOn build, jettyRun
}

// NOTE Access to local file URLs must be enabled in Chrome LiveReload extension if accessing docRoot from file URL
liveReload {
  //dependsOn build
  docRoot "${project.buildDir}/bespoke"
}

task serveLive {
  dependsOn build
  doFirst {
    tasks.jettyRun.daemon true
    tasks.jettyRun.execute()
    println "Server running at http://localhost:${tasks.jettyRun.httpPort}/"
    tasks.liveReload.execute()
  }
}
